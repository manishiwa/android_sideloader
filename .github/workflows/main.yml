name: Build Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.2.0) - defaults to current version from pubspec.yaml'
        required: false
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Determine Version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # For tag pushes, use the tag name
            VERSION="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # For manual dispatch with version input
            VERSION="${{ github.event.inputs.version }}"
          else
            # For manual dispatch without version, extract from pubspec.yaml
            VERSION="v$(grep '^version:' pubspec.yaml | sed 's/version: //' | cut -d'+' -f1)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

  build-windows:
    runs-on: windows-latest
    needs: setup
    permissions:
      contents: write
    name: Build Flutter App Windows
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Define Artifact Paths
        id: define-artifact-paths
        run: |
          $runner="build/windows/x64/runner"
          $artifacts="$runner/Artifacts"
          $build="$runner/Release/"
          $artifactName="AndroidSideloader-${{ needs.setup.outputs.version }}"
          $archiveName="$artifactName-Windows-Portable.zip"
          $archive="$artifacts/$archiveName"
          $installerName="$artifactName-Windows-Installer.exe"
          $installer="$artifacts/$installerName"
          echo "BUILD_DIR_PATH=$build" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ARCHIVE_NAME=$archiveName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "ARCHIVE_PATH=$archive" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "INSTALLER_NAME=$installerName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "INSTALLER_PATH=$installer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Build for Windows
        run: flutter build windows

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
        with:
          path: installer.iss
          options:  /O+ /DMyAppVersion="${{ needs.setup.outputs.version }}"

      - name: Compress Build Directory
        run: |
          Compress-Archive -Path "${{ env.BUILD_DIR_PATH }}\*" -DestinationPath "${{ env.ARCHIVE_PATH }}"

      - name: Upload Build Files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_PATH }}

      - name: Upload Installer Executable as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.INSTALLER_NAME }}
          path: ${{ env.INSTALLER_PATH }}

  build-macos:
    runs-on: macos-latest
    needs: setup
    permissions:
      contents: write
    name: Build Flutter App macOS
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Define Artifact Paths
        id: define-artifact-paths
        run: |
          ARTIFACT_DIR=build/macos/Build/Products/Release
          ARCHIVE_NAME="${{ needs.setup.outputs.version }}-macOS.zip"
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Build macOS App
        run: flutter build macos --release

      - name: Package macOS Build
        run: |
          cd build/macos/Build/Products/Release
          zip -r "AndroidSideloader-${{ needs.setup.outputs.version }}-Mac.zip" "Android Sideloader.app/"

      - name: Upload Build Files
        uses: actions/upload-artifact@v4
        with:
          name: "AndroidSideloader-${{ needs.setup.outputs.version }}-Mac.zip"
          path: "build/macos/Build/Products/Release/AndroidSideloader-${{ needs.setup.outputs.version }}-Mac.zip"

  build-linux:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: write
    name: Build Flutter App Linux
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Define Artifact Paths
        id: define-artifact-paths
        run: |
          ARTIFACT_DIR=build/linux/x64/release
          ARCHIVE_NAME="AndroidSideloader-${{ needs.setup.outputs.version }}-Linux.zip"
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: stable
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Install Dependencies
        run: flutter pub get

      - name: Build Linux App
        run: flutter build linux --release

      - name: Package Linux Build
        run: |
          cd ${{ env.ARTIFACT_DIR }}
          zip -r "${{ env.ARCHIVE_NAME }}" bundle/*

      - name: Upload Build Files
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.ARCHIVE_NAME }}"
          path: "${{ env.ARTIFACT_DIR }}/${{ env.ARCHIVE_NAME }}"

  release:
    runs-on: ubuntu-latest
    needs: [setup, build-windows, build-macos, build-linux]
    permissions:
      contents: write
    name: Create GitHub Release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Release Notes
        id: extract_changelog
        run: |
          chmod +x scripts/get-release-notes.sh
          ReleaseNotes=$(scripts/get-release-notes.sh "${{ needs.setup.outputs.version }}")
          if [ $? -ne 0 ]; then
              echo "Failed to create ReleaseNotes.md" >&2
              exit 1
          fi
          echo "$ReleaseNotes" > ./ReleaseNotes.md
          echo "Release Notes:"
          cat ./ReleaseNotes.md

      - name: Download Windows Portable
        uses: actions/download-artifact@v4
        with:
          name: AndroidSideloader-${{ needs.setup.outputs.version }}-Windows-Portable.zip
          path: windows-artifacts

      - name: Download Windows Installer
        uses: actions/download-artifact@v4
        with:
          name: AndroidSideloader-${{ needs.setup.outputs.version }}-Windows-Installer.exe
          path: windows-artifacts

      - name: Download macOS Build
        uses: actions/download-artifact@v4
        with:
          name: AndroidSideloader-${{ needs.setup.outputs.version }}-Mac.zip
          path: macos-artifacts

      - name: Download Linux Build
        uses: actions/download-artifact@v4
        with:
          name: AndroidSideloader-${{ needs.setup.outputs.version }}-Linux.zip
          path: linux-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.setup.outputs.version }}
          name: Release ${{ needs.setup.outputs.version }}
          replacesArtifacts: true
          prerelease: false
          artifactErrorsFailBuild: true
          bodyFile: "ReleaseNotes.md"
          artifacts: "windows-artifacts/*,macos-artifacts/*,linux-artifacts/*"
